str(training)
head(filter_Wl_data)
head(wl_data)
names(filter_Wl_data)
training <- filter_Wl_data[,-(1:2)]
names(filter_Wl_data)
t<- filter_Wl_data[,-"X"]
t<- filter_Wl_data[,-X]
names(filter_Wl_data)
names(t)
dim(training)
names(trainingf)
names(training)
training <- filter_Wl_data[,-(1:2)]
names(training)
training <- training[,-(1:2)]
dtrain <- createDataPartition(filter_Wl_data$classe, p=0.75, list = FALSE)
training <- filter_Wl_data[dtrain,]
training <- training[,-(1:2)]
testing <- filter_Wl_data[-dtrain,]
testing <-testing[,(1:2),]
dt_mdl <- train(classe~., data = training, method="rpart")
dt_mdl <- train(classe~., data = training, method="rpart",na.action = na.omit)
dt_mdl
rpart.plot(dt_mdl$finalModel, type=1,extra=104)
library(rpart.plot)
rpart.plot(dt_mdl$finalModel, type=1,extra=104)
rpart.plot(dt_mdl$finalModel, type=2,extra=104)
rpart.plot(dt_mdl$finalModel, type=2,extra=106)
rpart.plot(dt_mdl$finalModel, type=2,extra=102)
rpart.plot(dt_mdl$finalModel, extra=106)
rpart.plot(dt_mdl, extra=106)
rpart.plot(dt_mdl$finalModel)
rpart.plot(dt_mdl$finalModel, type=2,extra=104)
rpart.plot(dt_mdl$finalModel, type=2,extra=100)
dt_mdl
plot(dt_mdl)
plot(dt_mdl$finalModel)
fancyRpartPlot(dt_mdl)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(dt_mdl)
library(rattle)
install.packages("rattle")
library(rattle)
rpart.plot(dt_mdl,type=0)
dt_mdl <- rpart(classe~., data = training, na.action = na.omit)
rpart.plot(dt_mdl$finalModel, type=2,extra=100)
rpart.plot(dt_mdl, type=2,extra=100)
rpart.plot(dt_mdl, type=2,extra=104)
rpart.plot(dt_mdl, type=4,extra=104)
rpart.plot(dt_mdl, type=0,extra=104)
rpart.plot(dt_mdl, type=1,extra=104)
rpart.plot(dt_mdl, type=2,extra=104)
rpart.plot(dt_mdl, type=3,extra=104)
rpart.plot(dt_mdl, type=4,extra=104)
rpart.plot(dt_mdl, type=1,extra=104)
rf_mdl = randomForest(classe~., data = training, na.action = na.omit)
library(randomForest)
rf_mdl = randomForest(classe~., data = training, na.action = na.omit)
rf_mdl
fit$finalModel
preds <- predict(rf_mdl, newdata=testing)
rf_mdl = randomForest(classe~., data = training)
preds <- predict(rf_mdl, newdata=testing, na.action=na.omit)
testing <- filter_Wl_data[-dtrain,]
testing <-testing[,-(1:2),]
dim(testing)
preds <- predict(rf_mdl, newdata=testing, na.action=na.omit)
confusionMatrix(preds, testing$classe)
str(wl_data)
class(trainig$classe)
class(training$classe)
rf_mdl = randomForest(classe~., data = training, na.action = na.omit)
wl_data <- wl_data[,-(1:7)]
dim(wl_data)
nzv <- nearZeroVar(wl_data, saveMetrics = TRUE)
nzv1 <- nearZeroVar(wl_data)
nzv1 <- nearZeroVar(wl_data)
nzv1
filter_Wl_data <- wl_data[, -nzv1]
## removing the NA fulls
dtrain <- createDataPartition(filter_Wl_data$classe, p=0.75, list = FALSE)
## removing the NA fulls
dtrain <- createDataPartition(filter_Wl_data$classe, p=0.80, list = FALSE)
training <- filter_Wl_data[dtrain,]
names(training)
testing <- filter_Wl_data[-dtrain,]
dim(testing)
dt_mdl <- rpart(classe~., data = training, na.action = na.omit)
library(rpart.plot)
rpart.plot(dt_mdl, type=0,extra=104)
rpart.plot(dt_mdl, type=1,extra=104)
plot(training$stddev_roll_belt, training$roll_belt, col = training$classe)
hist(training$stddev_roll_belt, col = training$classe)
histogram(training$stddev_roll_belt, col = training$classe)
bar(training$stddev_roll_belt, col = training$classe)
bargraph(training$stddev_roll_belt, col = training$classe)
barchart(training$stddev_roll_belt, col = training$classe)
library(mosaic)
barchart(training$stddev_roll_belt| training$classe)
barchart(training$roll_belt| training$classe)
barchart(~training$roll_belt|training$classe)
barchart(~training$roll_belt, group =training$classe)
hist(~training$roll_belt, group =training$classe)
rpart.plot(dt_mdl, type=1,extra=104)
hist(~training$stddev_roll_belt  , group =training$classe)
bargraph(~training$stddev_roll_belt  , group =training$classe)
barchart(~training$stddev_roll_belt  , group =training$classe)
barchart(~training$stddev_roll_belt  , group =training$classe, auto.key=TRUE)
### random teee
dt_mdl <- rpart(classe~., data = training)
rpart.plot(dt_mdl, type=1,extra=104)
plot(~training$roll_belt  , training$pitch_forearm, col= training$classe)
plot(~training$roll_belt  , training$pitch_forearm, col= training$classe, na.action= na.omit)
summary(training$roll_belt )
length(training$roll_belt )
length(training$pitch_forearm)
qplot(~training$roll_belt  , training$pitch_forearm)
qplot(~training$roll_belt  , training$pitch_forearm, col= training$classe)
training$roll_belt
barchart(~training$roll_belt| training$classe)
barchart(~training$roll_belt,groups= training$classe)
barchart(~training$roll_belt,auto.key=TRUE,groups= training$classe)
bargraph(~training$roll_belt,auto.key=TRUE,groups= training$classe)
bargraph(~training$roll_belt|training$classe,auto.key=TRUE)
hist(~training$roll_belt|training$classe,auto.key=TRUE)
histogram(~training$roll_belt|training$classe,auto.key=TRUE)
histogram(~training$roll_belt, groups =training$classe,auto.key=TRUE)
rpart.plot(dt_mdl, type=1,extra=104)
library(mosaic)
qplot(roll_belt, magnet_dumbbell, colour= classe, data= training)
### random teee
qplot(roll_belt, max_roll_dumbbell, colour= classe, data= training)
qplot( max_roll_dumbbell,roll_belt, colour= classe, data= training)
rpart.plot(dt_mdl, type=1,extra=104)
qplot( roll_belt,pitch_forearm, colour= classe, data= training)
qplot(pitch_forearm, roll_belt, colour= classe, data= training)
histogram(~training$roll_belt, groups =training$classe,auto.key=TRUE)
histogram(~training$roll_belt, groups =training$classe,auto.key=TRUE)
histogram(~training$roll_belt, groups =training$classe,auto.key=TRUE)
boxplot(~training$roll_belt, groups =training$classe,auto.key=TRUE)
boxplot(~training$roll_belt |groups =training$classe,auto.key=TRUE)
boxplot(~training$roll_belt |training$classe,auto.key=TRUE)
boxplot(training$roll_belt |training$classe,auto.key=TRUE)
boxplot(training$roll_belt + training$classe,auto.key=TRUE)
boxplot(roll_belt,training )
boxplot(roll_belt,data=training )
boxplot(training$roll_belt)
boxplot(training$roll_belt|training$classe)
boxplot(training$roll_belt + training$classe)
boxplot(training$roll_belt ,groups= training$classe)
mosaicplot(~roll_belt + classe, data=training, color=TRUE)
mosaicplot(~classe + roll_belt, data=training, color=TRUE)
str(training)
dt_mdl <- rpart(classe~., data = training)
rpart.plot(dt_mdl, type=1,extra=104)
x= seq(1,length(training$roll_belt)
x= seq(1,length(training$roll_belt)
roll_belt=training$roll_belt
data <- data.frame(x,roll_belt)
x= seq(1,length(training$roll_belt)
)
x= seq(1,length(training$roll_belt))
roll_belt=training$roll_belt
data <- data.frame(x,roll_belt)
ggplot(data) + geom_point(aes(x=x,y=roll_belt))
qplot(roll_belt,x,col=classe, data=training)
data <- data.frame(x,roll_belt)
qplot(x,training$roll_belt,col=classe, data=training)
x <- runif(100, min = 1, max = 5)y <- x^2 + runif(100)
> plot(x, main = "Plot of x against index 1, 2, ..., length(x)")
x <- runif(100, min = 1, max = 5)
y <- x^2 + runif(100)
x
x <- runif(10, min = 1, max = 5)
y <- x^2 + runif(10)
x
y
plot(x, main="index")
plot(x, main="index")
plot(roll_belt, data= training, col = classes)
plot(roll_belt, data= training, col = classe)
plot(training$roll_belt, col = classe)
plot(training$roll_belt, col = training$classe)
qplot(x,training$roll_belt,col=classe, data=training)
qplot(x,roll_belt,col=classe, data=training)
qplot(roll_belt,x,col=classe, data=training)
x= seq(1,length(training$roll_belt))
qplot(x,roll_belt,col=classe, data=training)
pred <- predict(dt_mdl,testing)
confusionMatrix(pred,testing$classe)
pred <- predict(dt_mdl,testing)
pred
dt_mdl <- rpart(classe~., data = training)
pred <- predict(dt_mdl,testing)
confusionMatrix(pred,testing$classe)
predict(dt_mdl,newdata=testing)
testing <- filter_Wl_data[-dtrain,]
dim(testing)
head(testing$classe)
pred <- predict(dt_mdl,newdata=testing)
pred
head(pred)
pred <- predict(dt_mdl,newdata=testing, class='type')
head(pred)
pred <- predict(dt_mdl,newdata=testing, type='class')
confusionMatrix( ,testing$classe)
pred
confusionMatrix(pred ,testing$classe)
confusionMatrix(pred ,testing$classe)$overall[1]
rf_mdl = randomForest(classe~., data = training)
rf_mdl = randomForest(classe~., data = training,na.action=na.exclude)
summary(rf_mdl)
rf_mdl$forest
rf_mdl
pred1 <- predict(rf_mdl, testing$classe)
summary(training$pitch_belt)
summary(testing$pitch_belt)
pred1 <- predict(rf_mdl, testing)
confusionMatrix(pred ,testing$classe)
confusionMatrix(pred1 ,testing$classe)
install.packages("psych")
library(psych)
describe(training)
describe(training,na.rm=FALSE)
summary(training$pitch_belt)
summary(training$max_roll_belt)
training[1,2]
training[1,2:6]
training[1,1:6]
training[1:6,1]
sum( is.na( training[, 1] )
)
sum( is.na( training[, 5] )
)
sum( is.na( training[, 6] ) )
sum( ( training[, 6] ) )
nrow( ( training[, 6] ) )
nrow(training)
15366/15699
sapply(training$roll_belt,mean)
d <- describe(training)
d$n
p <- d[ d$n/15699 < 0.3]
p <- d(d$n/15699 < 0.3)
sum( is.na( myTraining[, i] )
)
d <- describe(training)
class(d)
d(1,)
head(d)
d$vars
df <- data.frame(d)
head(df)
class(df)
d$vars
names(df)
dim(training)
p <- d(n/15699 < 0.3)
p <- df(n/15699 < 0.3)
p <- df[n/15699 < 0.3]
p
p <- df[n/15699 < 0.3]
head(p)
n
p <- df[df$n/15699 < 0.3]
p <- df($n/15699 < 0.3)
p <- df(n/15699 < 0.3)
p <- d(n/15699 < 0.3)
df <- data.frame(d$vars, d$n)
df
p <- df(n/15699 < 0.3)
p <- subset(df$n/15699 < 0.3)
p <- df[n/15699 < 0.3,]
p
p <- df[df$n/15699 < 0.3,]
p
df$n/15699
class(df$n)
df
p <- d[d$n/15699 < 0.3,]
p
p <- p$vars
training_1 <- training[, -p]
head(training_1)
decribe(training_1)
describe(training_1)
dim(training_1)
d <- describe(filter_Wl_data)
p <- d[d$n/15699 < 0.3,]
head(p)
p <- d[d$n/15699 < 0.3,1]
head(p)
final_data <- filter_Wl_data[,-p]
head(final_data)
dim(final_data)
333/15699
p <- d[d$n/15699 < 0.1,1]
final_data <- filter_Wl_data[,-p]
dim(final_data)
dtrain <- createDataPartition(filter_Wl_data$classe, p=0.80, list = FALSE)
training <- filter_Wl_data[dtrain,]
str(training)
names(training)
testing <- filter_Wl_data[-dtrain,]
dim(testing)
dtrain <- createDataPartition(final_data$classe, p=0.80, list = FALSE)
training <- final_data[dtrain,]
str(training)
names(training)
testing <- final_data[-dtrain,]
dim(testing)
dt_mdl <- rpart(classe~., data = training)
library(rpart.plot)
rpart.plot(dt_mdl, type=1,extra=104)
library(mosaic)
qplot(roll_belt, colour= classe, data= training)
pred <- predict(dt_mdl,newdata=testing, type='class')
confusionMatrix(pred ,testing$classe)
confusionMatrix(pred ,testing$classe)$overall[1]
qplot( seq(1:length(training$roll_belt)),roll_belt, colour= classe, data= training)
dim(training)
dt_mdl <- rpart(classe~., data = training)
rpart.plot(dt_mdl, type=1,extra=104)
pred <- predict(dt_mdl,newdata=testing, type='class')
confusionMatrix(pred ,testing$classe)$overall[1]
rf_mdl = randomForest(classe~., data = training)
pred1 <- predict(rf_mdl, testing)
confusionMatrix(pred1 ,testing$classe)
densityplot(~roll_belt ,groups= classe, data=training)
library(MASS)
lda_mdl= lda(classe~.,data =training)
lda_mdl
pred2 <- predict(lda_mdl, testing)
confusionMatrix(pred2 ,testing$classe)
pred2 <- predict(lda_mdl, testing)
pred2
confusionMatrix(pred2$class ,testing$classe)
gbm_mdl <- gbm(classe~., data = training , method="gbm", verbose= FALSE)
BoostModel <- train(classe ~ ., data = training , method="gbm", verbose= FALSE)
require(caret)
data(GermanCredit)
dim(GermanCredit)
library(rpart.plot)
library(randomForest)
library(psych)
library(MASS)
library(gbm)
wl_data <- read.csv("/Users/ranjeetapegu/Documents/MachineLearning/ML PROJECT/pml-training.csv")
dim(wl_data)
str
#remove all the unwanted fields which are not measured using the
wl_data <- wl_data[,-(1:7)]
#nzv <- nearZeroVar(wl_data, saveMetrics = TRUE)
nzv1 <- nearZeroVar(wl_data)
filter_Wl_data <- wl_data[, -nzv1]
## removing the NA fulls (if more 10% of Data is NA)
d <- describe(filter_Wl_data)
p <- d[d$n/15699 < 0.1,1]
final_data <- filter_Wl_data[,-p]
# Set back to the original variable name
dtrain <- createDataPartition(final_data$classe, p=0.80, list = FALSE)
training <- final_data[dtrain,]
str(training)
names(training)
testing <- final_data[-dtrain,]
dim(testing)
gbm_mdl <- train(classe~., data = training, method ='gbm', verbose= FALSE)
rf_mdl
rf_mdl = randomForest(classe~.,
data = training)
library(randomForest)
rf_mdl = randomForest(classe~.,
data = training)
summary(rf_mdl)
rf_mdl
varImpPlot(rf_mdl)
Test_data
```{r, warning = FALSE, message= FALSE}
library(randomForest)
setwd("/Users/ranjeetapegu/Documents/MachineLearning/ML PROJECT")
# Training Data
Train_data <- read.csv("pml-training.csv")
dim(Train_data)
#Testing Data
Test_data <-read.csv("pml-testing.csv")
dim(Test_data)
```
rf_mdl
pred_test_data <- predict(rf_mdl, Test_data)
pred_test_data
confusionMatrix(pred_test_data ,Test_data$classe)
Test_data$classe
str(Test_data)
names(Test_data)
pred_test_data <- predict(rf_mdl, Test_data)
```
pred_test_data <- predict(rf_mdl, Test_data)
pred_test_data
plot(training$roll_belt, col = training$classe)
qplot( roll_belt,yaw_belt,
colour= classe, data= training,
xlab= "index")
plot( roll_belt,yaw_belt,
colour= classe, data= training,
xlab= "index")
qplot( seq(1:length(training$roll_belt)),
roll_belt, colour= classe, data= training,
xlab= "index")
library(caret)
qplot( roll_belt,yaw_belt,
colour= classe, data= training,
xlab= "index")
qplot( roll_belt,yaw_belt,
colour= classe, data= training,
xlab= roll_belt)
qplot( yaw_belt, roll_belt,
colour= classe, data= training,
xlab= roll_belt)
summary(training$roll_belt)
qplot( yaw_belt, pitch_forearm,
colour= classe, data= training,
xlab= roll_belt)
qplot( yaw_belt, pitch_forearm,
colour= classe, data= training,
xlab= "roll_belt")
qplot( yaw_belt, pitch_forearm,
colour= classe, data= training,
main="Classes of weight lifting exercise")
qplot( seq(1:length(training$roll_belt)),
roll_belt, colour= classe, data= training,
xlab= "index")
pred_test_data <- predict(rf_mdl, Test_data)
pred_test_data
length(training$roll_belt)
head(training$classe)
head(training$classe,5000)
tail(training$classe,500)
qplot( yaw_belt, pitch_forearm,
colour= classe, data= training,
main="Classes of weight lifting exercise")
mydat <- fread('https://github.com/ranjeetapegu/Machine-Learning/blob/master/pml-testing.csv')
mydat <- read.csv(url('https://github.com/ranjeetapegu/Machine-Learning/blob/master/pml-testing.csv'))
view(mydat)
head(mydat)
mydat <- read.table('https://github.com/ranjeetapegu/Machine-Learning/blob/master/pml-testing.csv')
library(RCurl)
mydat <-getURL('https://github.com/ranjeetapegu/Machine-Learning/blob/master/pml-testing.csv')
y <- read.csv(mydat)
mydat
download.file(url="https://github.com/ranjeetapegu/Machine-Learning/blob/master/pml-testing.csv",
destfile ="pml-testing.csv",method="curl")
It <- read.csv("pml-testing.csv", header=TRUE)
head(It)
dim(Test_data)
Test_data <-read.csv("pml-testing.csv")
names(Test_data)
setwd("/Users/ranjeetapegu/Documents/MachineLearning/ML PROJECT")
Train_data <- read.csv("pml-training.csv")
Test_data <-read.csv("pml-testing.csv")
names(Test_data)
getwd()
Train_data <- read.csv("/Users/ranjeetapegu/Documents/MachineLearning/ML PROJEC/pml-training.csv")
Train_data <- read.csv("/Users/ranjeetapegu/Documents/MachineLearning/ML PROJEC/pml-testing.csv")
download.file(url="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile ="pml-training.csv",method="curl")
Train_data  <- read.csv("pml-training.csv", header=TRUE)
head(Train_data )
download.file(url="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile ="pml-testing.csv",method="curl")
Test_data <-read.csv("pml-testing.csv",header=TRUE)
head(Test_data)
dim(Test_data)
qplot( seq(1:length(training$roll_belt)),
roll_belt, colour= classe, data= training,
xlab= "index")
qplot( yaw_belt, pitch_forearm,
colour= classe, data= training,
main="Classes of weight lifting exercise")
rpart.plot(dt_mdl, type=2,extra=104)
library(rpart); library(rpart.plot);
rpart.plot(dt_mdl, type=2,extra=104)
plot(rf_mdl)
varImpPlot(rf_mdl)
Train_data$prlysis
pwd
getwd()
setwd("Users/ranjeetapegu/Documents/MLProj")
setwd("/Users/ranjeetapegu/Documents/MLProj")
source('~/Documents/MachineLearning/Machine-Learning/project.R')
pred_test_data <- predict(rf_mdl, Test_data)
head(pred_test_data)
class(pred_test_data)
cbind(Test_data,pred_test_data)
c <- cbind(Test_data,pred_test_data)
head(c)
New_Test_data <- c(c,-160)
names(New_Test_data)
New_Test_data <- c[,-160]
names(New_Test_data)
names(New_Test_data)$160
names(New_Test_data)[160]
names(New_Test_data)[160] <- Classes
names(New_Test_data)[160] <- 'Classe'
names(New_Test_data)
write.csv(New_Test_dat, file = "new-pml-test.csv")
write.csv(New_Test_data, file = "new-pml-test.csv")
New_Test_data <- c[,160:161]
```{r}
New_Test_data
source('~/Documents/MachineLearning/Machine-Learning/project.R')
